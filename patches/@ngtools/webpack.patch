diff --git a/src/compiler_host.js b/src/compiler_host.js
semver exclusivity <12.0.0-rc.0
--- a/src/compiler_host.js
+++ b/src/compiler_host.js
@@ -12,7 +12,16 @@ const core_1 = require("@angular-devkit/core");
 const fs_1 = require("fs");
 const ts = require("typescript");
 const utils_1 = require("./utils");
+const {VirtualFS} = require('@yarnpkg/fslib');
 const dev = Math.floor(Math.random() * 10000);
+
+function resolveVirtualSource(base, p) {
+  // Angular already normalized the paths into a unix-like format, so we don't have to convert
+  const resolved = VirtualFS.resolveVirtual(p);
+  if (/(?:^|\/).yarn\//.test(core_1.isAbsolute(resolved) ? core_1.relative(base, resolved) : resolved)) return p;
+  return resolved;
+}
+
 class WebpackCompilerHost {
     constructor(_options, basePath, host, cacheSourceFiles, directTemplateLoading = false, ngccProcessor, moduleResolutionCache) {
         this._options = _options;
@@ -53,7 +62,7 @@ class WebpackCompilerHost {
         return core_1.getSystemPath(core_1.normalize(path));
     }
     resolve(path) {
-        const p = core_1.normalize(path);
+        const p = resolveVirtualSource(this._basePath, core_1.normalize(path));
         if (core_1.isAbsolute(p)) {
             return p;
         }
diff --git a/src/ngcc_processor.js b/src/ngcc_processor.js
semver exclusivity >= 11.0.0 < 11.0.2
--- a/src/ngcc_processor.js
+++ b/src/ngcc_processor.js
@@ -31,11 +31,12 @@ class NgccProcessor {
         this.tsConfigPath = tsConfigPath;
         this._processedModules = new Set();
         this._logger = new NgccLogger(this.compilationWarnings, this.compilationErrors);
-        this._nodeModulesDirectory = this.findNodeModulesDirectory(this.basePath);
+        this._nodeModulesDirectory = require('path').join(__dirname.slice(0, __dirname.lastIndexOf('/.yarn/')), 'node_modules');// this.findNodeModulesDirectory(this.basePath);
     }
     /** Process the entire node modules tree. */
     process() {
+        return;
         // Under Bazel when running in sandbox mode parts of the filesystem is read-only.
         if (process.env.BAZEL_TARGET) {
             return;
         }
diff --git a/src/ngcc_processor.js b/src/ngcc_processor.js
semver exclusivity ^11.0.2
--- a/src/ngcc_processor.js
+++ b/src/ngcc_processor.js
@@ -33,7 +33,7 @@ class NgccProcessor {
         this.symlinks = symlinks;
         this._processedModules = new Set();
         this._logger = new NgccLogger(this.compilationWarnings, this.compilationErrors);
-        this._nodeModulesDirectory = this.findNodeModulesDirectory(this.basePath);
+        this._nodeModulesDirectory = require('path').join(__dirname.slice(0, __dirname.lastIndexOf('/.yarn/')), 'node_modules');
         this._resolver = enhanced_resolve_1.ResolverFactory.createResolver({
             // NOTE: @types/webpack InputFileSystem is missing some methods
             // tslint:disable-next-line: no-any
@@ -45,6 +45,7 @@ class NgccProcessor {
     }
     /** Process the entire node modules tree. */
     process() {
+        return;
         // Under Bazel when running in sandbox mode parts of the filesystem is read-only.
         if (process.env.BAZEL_TARGET) {
             return;
