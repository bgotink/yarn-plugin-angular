diff --git a/src/compiler_host.js b/src/compiler_host.js
--- a/src/compiler_host.js
+++ b/src/compiler_host.js
@@ -12,7 +12,16 @@ const core_1 = require("@angular-devkit/core");
 const fs_1 = require("fs");
 const ts = require("typescript");
 const utils_1 = require("./utils");
+const {VirtualFS} = require('@yarnpkg/fslib');
 const dev = Math.floor(Math.random() * 10000);
+
+function resolveVirtualSource(base, p) {
+  // Angular already normalized the paths into a unix-like format, so we don't have to convert
+  const resolved = VirtualFS.resolveVirtual(p);
+  if (/(?:^|\/).yarn\//.test(core_1.isAbsolute(resolved) ? core_1.relative(base, resolved) : resolved)) return p;
+  return resolved;
+}
+
 class WebpackCompilerHost {
     constructor(_options, basePath, host, cacheSourceFiles, directTemplateLoading = false, ngccProcessor, moduleResolutionCache) {
         this._options = _options;
@@ -53,7 +62,7 @@ class WebpackCompilerHost {
         return core_1.getSystemPath(core_1.normalize(path));
     }
     resolve(path) {
-        const p = core_1.normalize(path);
+        const p = resolveVirtualSource(this._basePath, core_1.normalize(path));
         if (core_1.isAbsolute(p)) {
             return p;
         }
@@ -261,7 +270,7 @@ class WebpackCompilerHost {
             }
             const content = this.readFile(fileName);
             if (content !== undefined) {
-                const sf = ts.createSourceFile(utils_1.workaroundResolve(fileName), content, languageVersion, true);
+                const sf = ts.createSourceFile(utils_1.workaroundResolve(resolveVirtualSource(this._basePath, fileName)), content, languageVersion, true);
                 if (this.cacheSourceFiles) {
                     this._sourceFileCache.set(p, sf);
                 }
