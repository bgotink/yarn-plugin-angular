export default "diff --git a/node/resolve.js b/node/resolve.js\nindex 41c5a81..77cfbe4 100644\nsemver exclusivity >=8.3.13\n--- a/node/resolve.js\n+++ b/node/resolve.js\n@@ -66,7 +66,80 @@ function _getGlobalNodeModules() {\n         ? path.resolve(globalPrefix || '', 'lib', 'node_modules')\n         : path.resolve(globalPrefix || '', 'node_modules');\n }\n-let _resolveHook = null;\n+const pnpapi = require('pnpapi');\n+let _resolveHook =\n+    /**\n+     *\n+     * @param {string} request\n+     * @param {{paths?: string[]; checkLocal?: boolean; basedir: string}} options\n+     */\n+    function resolveHook(request, options) {\n+      const basePath = options.basedir;\n+\n+      if (/^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[/\\\\])/.test(request)) {\n+        let res = path.resolve(basePath, request);\n+        if (request === '..' || request.endsWith('/')) {\n+          res += '/';\n+        }\n+\n+        const m = resolve(res, options);\n+        if (m) {\n+          return m;\n+        }\n+      } else {\n+        const n = resolve(request, options);\n+        if (n) {\n+          return n;\n+        }\n+      }\n+\n+      if (options.checkLocal) {\n+        const callers = _caller();\n+        for (const caller of callers) {\n+          const localDir = path.dirname(caller);\n+          if (localDir !== options.basedir) {\n+            try {\n+              return resolveHook(x, {\n+                ...options,\n+                checkLocal: false,\n+                basedir: localDir,\n+              });\n+            } catch (e) {\n+              // Just swap the basePath with the original call one.\n+              if (!(e instanceof ModuleNotFoundException)) {\n+                throw e;\n+              }\n+            }\n+          }\n+        }\n+      }\n+\n+      throw new ModuleNotFoundException(request, basePath);\n+\n+      function resolve(request, options) {\n+        if (options.resolvePackageJson) {\n+          try {\n+            return pnpapi.resolveRequest(path.join(request, 'package.json'), options.basedir);\n+          } catch (_) {\n+            // ignore\n+          }\n+        }\n+\n+        if (request.endsWith('/')) {\n+          try {\n+            return pnpapi.resolveRequest(path.join(request, 'index'), options.basedir);\n+          } catch (_) {\n+            // ignore\n+          }\n+        } else {\n+          try {\n+            return pnpapi.resolveRequest(request, options.basedir);\n+          } catch (_) {\n+            // ignore\n+          }\n+        }\n+      }\n+    };\n /** @deprecated since version 8. Use `require.resolve` instead. */\n function setResolveHook(hook) {\n     _resolveHook = hook;\n";
